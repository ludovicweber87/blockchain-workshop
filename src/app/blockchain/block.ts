'use client';

import { CryptoUtils } from '@/utils/crypto';

/**
 * Classe Block - Repr√©sente un bloc dans la blockchain
 *
 * Chaque bloc contient :
 * - Des donn√©es (transactions)
 * - Un lien vers le bloc pr√©c√©dent (previousHash)
 * - Un hash unique calcul√© √† partir de son contenu
 * - Un nonce utilis√© pour le minage
 */
export class Block {
    // Position du bloc dans la cha√Æne (0 = Genesis, 1 = premier bloc, etc.)
    public index: number;

    // Moment de cr√©ation du bloc (timestamp)
    public timestamp: number;

    // Les transactions contenues dans ce bloc
    public data: {
        fromAddress: string | null; // Qui envoie (null = r√©compense de minage)
        toAddress: string; // Qui re√ßoit
        amount: number; // Montant de la transaction
    }[];

    // Hash du bloc pr√©c√©dent (lien dans la cha√Æne)
    public previousHash: string | null;

    // Nombre utilis√© pour le minage (Proof of Work)
    public nonce: number;

    // Hash unique de ce bloc (calcul√© √† partir de tout le contenu)
    public hash: string | null;

    /**
     * Constructeur - Cr√©e un nouveau bloc
     *
     * TODO: Initialiser toutes les propri√©t√©s du bloc :
     * - index : position dans la cha√Æne
     * - timestamp : moment de cr√©ation
     * - data : les transactions
     * - previousHash : hash du bloc pr√©c√©dent
     * - nonce : commencer √† 0
     * - hash : commencer √† null (sera calcul√© plus tard)
     */
    constructor(
        index: number,
        timestamp: number,
        data: {
            fromAddress: string | null;
            toAddress: string;
            amount: number;
        }[],
        previousHash: string | null
    ) {
        // TODO: Initialiser toutes les propri√©t√©s
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.nonce = 0;
        this.hash = null;
    }

    /**
     * Calcule le hash du bloc
     *
     * Le hash est calcul√© √† partir de :
     * - L'index du bloc
     * - Le hash du bloc pr√©c√©dent
     * - Le timestamp
     * - Les donn√©es (transactions)
     * - Le nonce
     *
     * TODO:
     * 1. Cr√©er une cha√Æne de caract√®res avec tous les √©l√©ments
     * 2. Utiliser CryptoUtils.sha256() pour calculer le hash
     * 3. Retourner le hash
     */
    async calculateHash(): Promise<string> {
        // TODO: Calculer et retourner le hash
    }

    /**
     * Mine le bloc (Proof of Work)
     *
     * Le minage consiste √† trouver un hash qui commence par un certain nombre de z√©ros.
     * Plus la difficult√© est √©lev√©e, plus il faut de z√©ros au d√©but.
     *
     * Processus :
     * 1. Calculer le hash actuel
     * 2. V√©rifier s'il commence par le bon nombre de z√©ros
     * 3. Si non, incr√©menter le nonce et recommencer
     * 4. Si oui, le bloc est min√© !
     *
     * TODO:
     * 1. Cr√©er la cible (ex: "000" pour difficult√© 3)
     * 2. Boucle infinie :
     *    - Calculer le hash actuel
     *    - V√©rifier s'il commence par la cible
     *    - Si oui, sortir de la boucle
     *    - Si non, incr√©menter le nonce
     * 3. Afficher des logs pour suivre le processus
     */
    async mineBlock(difficulty: number): Promise<void> {
        // TODO: Impl√©menter le minage du bloc
        const target = '0'.repeat(difficulty);

        let attempts = 0;
        const startTime = Date.now();

        while (true) {
            this.hash = await this.calculateHash();
            attempts++;

            // Log chaque tentative avec le hash essay√©
            console.log(
                `üîÑ Tentative ${attempts}: Hash = ${this.hash.substring(0, 20)}... (Nonce: ${this.nonce})`
            );

            if (this.hash.startsWith(target)) {
                const duration = Date.now() - startTime;
                console.log(
                    'üîê Hash calcul√© pour le bloc',
                    this.index,
                    ':',
                    this.hash.substring(0, 20) + '...'
                );
                console.log('üìä Statistiques:', {
                    nonce: this.nonce,
                    attempts: attempts,
                    duration: duration + 'ms',
                    hash: this.hash.substring(0, 20) + '...',
                });
                break;
            }

            this.nonce++;
        }
    }
}
